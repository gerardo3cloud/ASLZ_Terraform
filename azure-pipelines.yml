# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

resources:
- repo: self

stages:
- stage: tf_deploy
  displayName: "Terraform deploy"
  jobs:
  - job: initialize
    displayName: "Installing Terraformcommand"
    steps:
    - script: | 
          sudo apt-get update
          sudo apt-get install -y unzip
          sudo apt-get install -y wget
          wget https://releases.hashicorp.com/terraform/1.9.4/terraform_1.9.4_linux_amd64.zip
          unzip terraform_1.9.4_linux_amd64.zip
          sudo mv terraform /usr/local/bin/
          terraform --version

          export ARM_CLIENT_ID=$(BACKEND_CLIENT_ID)
          export ARM_CLIENT_SECRET=$(BACKEND_CLIENT_SECRET)
          export ARM_SUBSCRIPTION_ID=$(BACKEND_SUBSCRIPTION_ID)
          export ARM_TENANT_ID=$(BACKEND_TENANT_ID)
          
          cd ./Project1
          pwd
          terraform init
          
          terraform plan \
          -var client_id=$(DEPLOYMENT_CLIENT_ID) \
          -var client_secret=$(DEPLOYMENT_CLIENT_SECRET) \
          -var subscription_id=$(DEPLOYMENT_SUBSCRIPTION_ID) \
          -var tenant_id=$(DEPLOYMENT_TENANT_ID) -out=tfplan
          
          terraform apply \
          -var client_id=$(DEPLOYMENT_CLIENT_ID) \
          -var client_secret=$(DEPLOYMENT_CLIENT_SECRET) \
          -var subscription_id=$(DEPLOYMENT_SUBSCRIPTION_ID) \
          -var tenant_id=$(DEPLOYMENT_TENANT_ID) -auto-approve tfplan
